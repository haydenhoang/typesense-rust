/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`delete_synonym_set`]
#[derive(Clone, Debug)]
pub struct DeleteSynonymSetParams {
    /// The name of the synonym set to delete
    pub synonym_set_name: String
}

/// struct for passing parameters to the method [`retrieve_synonym_set`]
#[derive(Clone, Debug)]
pub struct RetrieveSynonymSetParams {
    /// The name of the synonym set to retrieve
    pub synonym_set_name: String
}

/// struct for passing parameters to the method [`upsert_synonym_set`]
#[derive(Clone, Debug)]
pub struct UpsertSynonymSetParams {
    /// The name of the synonym set to create/update
    pub synonym_set_name: String,
    /// The synonym set to be created/updated
    pub synonym_set_create_schema: models::SynonymSetCreateSchema
}


/// struct for typed errors of method [`delete_synonym_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSynonymSetError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_synonym_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveSynonymSetError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_synonym_sets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveSynonymSetsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_synonym_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertSynonymSetError {
    Status400(models::ApiResponse),
    UnknownValue(serde_json::Value),
}


/// Delete a specific synonym set by its name
pub async fn delete_synonym_set(configuration: &configuration::Configuration, params: DeleteSynonymSetParams) -> Result<models::SynonymSetDeleteSchema, Error<DeleteSynonymSetError>> {

    let uri_str = format!("{}/synonym_sets/{synonymSetName}", configuration.base_path, synonymSetName=crate::apis::urlencode(params.synonym_set_name));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key.clone(),
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SynonymSetDeleteSchema`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SynonymSetDeleteSchema`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSynonymSetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve a specific synonym set by its name
pub async fn retrieve_synonym_set(configuration: &configuration::Configuration, params: RetrieveSynonymSetParams) -> Result<models::SynonymSetCreateSchema, Error<RetrieveSynonymSetError>> {

    let uri_str = format!("{}/synonym_sets/{synonymSetName}", configuration.base_path, synonymSetName=crate::apis::urlencode(params.synonym_set_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key.clone(),
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SynonymSetCreateSchema`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SynonymSetCreateSchema`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveSynonymSetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve all synonym sets
pub async fn retrieve_synonym_sets(configuration: &configuration::Configuration) -> Result<Vec<models::SynonymSetSchema>, Error<RetrieveSynonymSetsError>> {

    let uri_str = format!("{}/synonym_sets", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key.clone(),
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec<models::SynonymSetSchema>`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec<models::SynonymSetSchema>`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveSynonymSetsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create or update a synonym set with the given name
pub async fn upsert_synonym_set(configuration: &configuration::Configuration, params: UpsertSynonymSetParams) -> Result<models::SynonymSetSchema, Error<UpsertSynonymSetError>> {

    let uri_str = format!("{}/synonym_sets/{synonymSetName}", configuration.base_path, synonymSetName=crate::apis::urlencode(params.synonym_set_name));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{prefix} {key}"),
            None => key.clone(),
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.synonym_set_create_schema);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SynonymSetSchema`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SynonymSetSchema`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpsertSynonymSetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

