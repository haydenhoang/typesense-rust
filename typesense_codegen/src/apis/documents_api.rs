/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 27.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`delete_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDocumentsError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSearchOverrideError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`export_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportDocumentsError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchOverrideError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_overrides`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchOverridesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`import_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ImportDocumentsError {
    Status400(models::ApiResponse),
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`multi_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MultiSearchError {
    Status400(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_collection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchCollectionError {
    Status400(models::ApiResponse),
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateDocumentsError {
    Status400(models::ApiResponse),
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertSearchOverrideError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}


/// Delete an individual document from a collection by using its ID.
pub async fn delete_document(configuration: &mut configuration::Configuration, collection_name: &str, document_id: &str) -> Result<serde_json::Value, Error<DeleteDocumentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents/{documentId}", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name), documentId=crate::apis::urlencode(document_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a bunch of documents that match a specific filter condition. Use the `batch_size` parameter to control the number of documents that should deleted at a time. A larger value will speed up deletions, but will impact performance of other operations running on the server.
pub async fn delete_documents(configuration: &mut configuration::Configuration, collection_name: &str, batch_size: Option<i32>, filter_by: Option<&str>, ignore_not_found: Option<bool>) -> Result<models::DeleteDocuments200Response, Error<DeleteDocumentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = batch_size {
        local_var_req_builder = local_var_req_builder.query(&[("batch_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_by {
        local_var_req_builder = local_var_req_builder.query(&[("filter_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ignore_not_found {
        local_var_req_builder = local_var_req_builder.query(&[("ignore_not_found", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteDocumentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_search_override(configuration: &mut configuration::Configuration, collection_name: &str, override_id: &str) -> Result<models::SearchOverrideDeleteResponse, Error<DeleteSearchOverrideError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/overrides/{overrideId}", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name), overrideId=crate::apis::urlencode(override_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteSearchOverrideError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Export all documents in a collection in JSON lines format.
pub async fn export_documents(configuration: &mut configuration::Configuration, collection_name: &str, exclude_fields: Option<&str>, filter_by: Option<&str>, include_fields: Option<&str>) -> Result<String, Error<ExportDocumentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents/export", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = exclude_fields {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_by {
        local_var_req_builder = local_var_req_builder.query(&[("filter_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_fields {
        local_var_req_builder = local_var_req_builder.query(&[("include_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExportDocumentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch an individual document from a collection by using its ID.
pub async fn get_document(configuration: &mut configuration::Configuration, collection_name: &str, document_id: &str) -> Result<serde_json::Value, Error<GetDocumentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents/{documentId}", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name), documentId=crate::apis::urlencode(document_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve the details of a search override, given its id.
pub async fn get_search_override(configuration: &mut configuration::Configuration, collection_name: &str, override_id: &str) -> Result<models::SearchOverride, Error<GetSearchOverrideError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/overrides/{overrideId}", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name), overrideId=crate::apis::urlencode(override_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSearchOverrideError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_search_overrides(configuration: &mut configuration::Configuration, collection_name: &str) -> Result<models::SearchOverridesResponse, Error<GetSearchOverridesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/overrides", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSearchOverridesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The documents to be imported must be formatted in a newline delimited JSON structure. You can feed the output file from a Typesense export operation directly as import.
pub async fn import_documents(configuration: &mut configuration::Configuration, collection_name: &str, body: &str, action: Option<models::IndexAction>, batch_size: Option<i32>, dirty_values: Option<models::DirtyValues>, remote_embedding_batch_size: Option<i32>, return_doc: Option<bool>, return_id: Option<bool>) -> Result<String, Error<ImportDocumentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents/import", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = action {
        local_var_req_builder = local_var_req_builder.query(&[("action", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = batch_size {
        local_var_req_builder = local_var_req_builder.query(&[("batch_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dirty_values {
        local_var_req_builder = local_var_req_builder.query(&[("dirty_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_embedding_batch_size {
        local_var_req_builder = local_var_req_builder.query(&[("remote_embedding_batch_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_doc {
        local_var_req_builder = local_var_req_builder.query(&[("return_doc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = return_id {
        local_var_req_builder = local_var_req_builder.query(&[("return_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ImportDocumentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// A document to be indexed in a given collection must conform to the schema of the collection.
pub async fn index_document(configuration: &mut configuration::Configuration, collection_name: &str, body: serde_json::Value, action: Option<&str>, dirty_values: Option<models::DirtyValues>) -> Result<serde_json::Value, Error<IndexDocumentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = action {
        local_var_req_builder = local_var_req_builder.query(&[("action", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = dirty_values {
        local_var_req_builder = local_var_req_builder.query(&[("dirty_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IndexDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This is especially useful to avoid round-trip network latencies incurred otherwise if each of these requests are sent in separate HTTP requests. You can also use this feature to do a federated search across multiple collections in a single HTTP request.
pub async fn multi_search(configuration: &mut configuration::Configuration, cache_ttl: Option<i32>, conversation: Option<bool>, conversation_id: Option<&str>, conversation_model_id: Option<&str>, drop_tokens_mode: Option<models::DropTokensMode>, drop_tokens_threshold: Option<i32>, enable_highlight_v1: Option<bool>, enable_overrides: Option<bool>, enable_synonyms: Option<bool>, enable_typos_for_alpha_numerical_tokens: Option<bool>, enable_typos_for_numerical_tokens: Option<bool>, exclude_fields: Option<&str>, exhaustive_search: Option<bool>, facet_by: Option<&str>, facet_query: Option<&str>, facet_return_parent: Option<&str>, facet_strategy: Option<&str>, filter_by: Option<&str>, filter_curated_hits: Option<bool>, group_by: Option<&str>, group_limit: Option<i32>, group_missing_values: Option<bool>, hidden_hits: Option<&str>, highlight_affix_num_tokens: Option<i32>, highlight_end_tag: Option<&str>, highlight_fields: Option<&str>, highlight_full_fields: Option<&str>, highlight_start_tag: Option<&str>, include_fields: Option<&str>, infix: Option<&str>, limit: Option<i32>, max_candidates: Option<i32>, max_extra_prefix: Option<i32>, max_extra_suffix: Option<i32>, max_facet_values: Option<i32>, min_len_1typo: Option<i32>, min_len_2typo: Option<i32>, num_typos: Option<&str>, offset: Option<i32>, override_tags: Option<&str>, page: Option<i32>, per_page: Option<i32>, pinned_hits: Option<&str>, pre_segmented_query: Option<bool>, prefix: Option<&str>, preset: Option<&str>, prioritize_exact_match: Option<bool>, prioritize_num_matching_fields: Option<bool>, prioritize_token_position: Option<bool>, q: Option<&str>, query_by: Option<&str>, query_by_weights: Option<&str>, remote_embedding_num_tries: Option<i32>, remote_embedding_timeout_ms: Option<i32>, search_cutoff_ms: Option<i32>, snippet_threshold: Option<i32>, sort_by: Option<&str>, split_join_tokens: Option<&str>, stopwords: Option<&str>, synonym_num_typos: Option<i32>, synonym_prefix: Option<bool>, text_match_type: Option<&str>, typo_tokens_threshold: Option<i32>, use_cache: Option<bool>, vector_query: Option<&str>, voice_query: Option<&str>, multi_search_searches_parameter: Option<models::MultiSearchSearchesParameter>) -> Result<models::MultiSearchResult, Error<MultiSearchError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/multi_search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = cache_ttl {
        local_var_req_builder = local_var_req_builder.query(&[("cache_ttl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = conversation {
        local_var_req_builder = local_var_req_builder.query(&[("conversation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = conversation_id {
        local_var_req_builder = local_var_req_builder.query(&[("conversation_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = conversation_model_id {
        local_var_req_builder = local_var_req_builder.query(&[("conversation_model_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = drop_tokens_mode {
        local_var_req_builder = local_var_req_builder.query(&[("drop_tokens_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = drop_tokens_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("drop_tokens_threshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_highlight_v1 {
        local_var_req_builder = local_var_req_builder.query(&[("enable_highlight_v1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_overrides {
        local_var_req_builder = local_var_req_builder.query(&[("enable_overrides", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_synonyms {
        local_var_req_builder = local_var_req_builder.query(&[("enable_synonyms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_typos_for_alpha_numerical_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("enable_typos_for_alpha_numerical_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_typos_for_numerical_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("enable_typos_for_numerical_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_fields {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exhaustive_search {
        local_var_req_builder = local_var_req_builder.query(&[("exhaustive_search", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_by {
        local_var_req_builder = local_var_req_builder.query(&[("facet_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_query {
        local_var_req_builder = local_var_req_builder.query(&[("facet_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_return_parent {
        local_var_req_builder = local_var_req_builder.query(&[("facet_return_parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_strategy {
        local_var_req_builder = local_var_req_builder.query(&[("facet_strategy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_by {
        local_var_req_builder = local_var_req_builder.query(&[("filter_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_curated_hits {
        local_var_req_builder = local_var_req_builder.query(&[("filter_curated_hits", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_by {
        local_var_req_builder = local_var_req_builder.query(&[("group_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_limit {
        local_var_req_builder = local_var_req_builder.query(&[("group_limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_missing_values {
        local_var_req_builder = local_var_req_builder.query(&[("group_missing_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hidden_hits {
        local_var_req_builder = local_var_req_builder.query(&[("hidden_hits", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_affix_num_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_affix_num_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_end_tag {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_end_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_fields {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_full_fields {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_full_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_start_tag {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_start_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_fields {
        local_var_req_builder = local_var_req_builder.query(&[("include_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infix {
        local_var_req_builder = local_var_req_builder.query(&[("infix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_candidates {
        local_var_req_builder = local_var_req_builder.query(&[("max_candidates", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_extra_prefix {
        local_var_req_builder = local_var_req_builder.query(&[("max_extra_prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_extra_suffix {
        local_var_req_builder = local_var_req_builder.query(&[("max_extra_suffix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_facet_values {
        local_var_req_builder = local_var_req_builder.query(&[("max_facet_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_len_1typo {
        local_var_req_builder = local_var_req_builder.query(&[("min_len_1typo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_len_2typo {
        local_var_req_builder = local_var_req_builder.query(&[("min_len_2typo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = num_typos {
        local_var_req_builder = local_var_req_builder.query(&[("num_typos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = override_tags {
        local_var_req_builder = local_var_req_builder.query(&[("override_tags", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pinned_hits {
        local_var_req_builder = local_var_req_builder.query(&[("pinned_hits", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pre_segmented_query {
        local_var_req_builder = local_var_req_builder.query(&[("pre_segmented_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder = local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = preset {
        local_var_req_builder = local_var_req_builder.query(&[("preset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prioritize_exact_match {
        local_var_req_builder = local_var_req_builder.query(&[("prioritize_exact_match", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prioritize_num_matching_fields {
        local_var_req_builder = local_var_req_builder.query(&[("prioritize_num_matching_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prioritize_token_position {
        local_var_req_builder = local_var_req_builder.query(&[("prioritize_token_position", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query_by {
        local_var_req_builder = local_var_req_builder.query(&[("query_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query_by_weights {
        local_var_req_builder = local_var_req_builder.query(&[("query_by_weights", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_embedding_num_tries {
        local_var_req_builder = local_var_req_builder.query(&[("remote_embedding_num_tries", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_embedding_timeout_ms {
        local_var_req_builder = local_var_req_builder.query(&[("remote_embedding_timeout_ms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_cutoff_ms {
        local_var_req_builder = local_var_req_builder.query(&[("search_cutoff_ms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = snippet_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("snippet_threshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = split_join_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("split_join_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stopwords {
        local_var_req_builder = local_var_req_builder.query(&[("stopwords", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = synonym_num_typos {
        local_var_req_builder = local_var_req_builder.query(&[("synonym_num_typos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = synonym_prefix {
        local_var_req_builder = local_var_req_builder.query(&[("synonym_prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = text_match_type {
        local_var_req_builder = local_var_req_builder.query(&[("text_match_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = typo_tokens_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("typo_tokens_threshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = use_cache {
        local_var_req_builder = local_var_req_builder.query(&[("use_cache", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vector_query {
        local_var_req_builder = local_var_req_builder.query(&[("vector_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voice_query {
        local_var_req_builder = local_var_req_builder.query(&[("voice_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&multi_search_searches_parameter);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MultiSearchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Search for documents in a collection that match the search criteria.
pub async fn search_collection(configuration: &mut configuration::Configuration, collection_name: &str, cache_ttl: Option<i32>, conversation: Option<bool>, conversation_id: Option<&str>, conversation_model_id: Option<&str>, drop_tokens_mode: Option<models::DropTokensMode>, drop_tokens_threshold: Option<i32>, enable_highlight_v1: Option<bool>, enable_overrides: Option<bool>, enable_synonyms: Option<bool>, enable_typos_for_alpha_numerical_tokens: Option<bool>, enable_typos_for_numerical_tokens: Option<bool>, exclude_fields: Option<&str>, exhaustive_search: Option<bool>, facet_by: Option<&str>, facet_query: Option<&str>, facet_return_parent: Option<&str>, facet_strategy: Option<&str>, filter_by: Option<&str>, filter_curated_hits: Option<bool>, group_by: Option<&str>, group_limit: Option<i32>, group_missing_values: Option<bool>, hidden_hits: Option<&str>, highlight_affix_num_tokens: Option<i32>, highlight_end_tag: Option<&str>, highlight_fields: Option<&str>, highlight_full_fields: Option<&str>, highlight_start_tag: Option<&str>, include_fields: Option<&str>, infix: Option<&str>, limit: Option<i32>, max_candidates: Option<i32>, max_extra_prefix: Option<i32>, max_extra_suffix: Option<i32>, max_facet_values: Option<i32>, min_len_1typo: Option<i32>, min_len_2typo: Option<i32>, num_typos: Option<&str>, offset: Option<i32>, override_tags: Option<&str>, page: Option<i32>, per_page: Option<i32>, pinned_hits: Option<&str>, pre_segmented_query: Option<bool>, prefix: Option<&str>, preset: Option<&str>, prioritize_exact_match: Option<bool>, prioritize_num_matching_fields: Option<bool>, prioritize_token_position: Option<bool>, q: Option<&str>, query_by: Option<&str>, query_by_weights: Option<&str>, remote_embedding_num_tries: Option<i32>, remote_embedding_timeout_ms: Option<i32>, search_cutoff_ms: Option<i32>, snippet_threshold: Option<i32>, sort_by: Option<&str>, split_join_tokens: Option<&str>, stopwords: Option<&str>, synonym_num_typos: Option<i32>, synonym_prefix: Option<bool>, text_match_type: Option<&str>, typo_tokens_threshold: Option<i32>, use_cache: Option<bool>, vector_query: Option<&str>, voice_query: Option<&str>) -> Result<models::SearchResult, Error<SearchCollectionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents/search", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = cache_ttl {
        local_var_req_builder = local_var_req_builder.query(&[("cache_ttl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = conversation {
        local_var_req_builder = local_var_req_builder.query(&[("conversation", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = conversation_id {
        local_var_req_builder = local_var_req_builder.query(&[("conversation_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = conversation_model_id {
        local_var_req_builder = local_var_req_builder.query(&[("conversation_model_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = drop_tokens_mode {
        local_var_req_builder = local_var_req_builder.query(&[("drop_tokens_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = drop_tokens_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("drop_tokens_threshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_highlight_v1 {
        local_var_req_builder = local_var_req_builder.query(&[("enable_highlight_v1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_overrides {
        local_var_req_builder = local_var_req_builder.query(&[("enable_overrides", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_synonyms {
        local_var_req_builder = local_var_req_builder.query(&[("enable_synonyms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_typos_for_alpha_numerical_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("enable_typos_for_alpha_numerical_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_typos_for_numerical_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("enable_typos_for_numerical_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude_fields {
        local_var_req_builder = local_var_req_builder.query(&[("exclude_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exhaustive_search {
        local_var_req_builder = local_var_req_builder.query(&[("exhaustive_search", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_by {
        local_var_req_builder = local_var_req_builder.query(&[("facet_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_query {
        local_var_req_builder = local_var_req_builder.query(&[("facet_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_return_parent {
        local_var_req_builder = local_var_req_builder.query(&[("facet_return_parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facet_strategy {
        local_var_req_builder = local_var_req_builder.query(&[("facet_strategy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_by {
        local_var_req_builder = local_var_req_builder.query(&[("filter_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_curated_hits {
        local_var_req_builder = local_var_req_builder.query(&[("filter_curated_hits", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_by {
        local_var_req_builder = local_var_req_builder.query(&[("group_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_limit {
        local_var_req_builder = local_var_req_builder.query(&[("group_limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_missing_values {
        local_var_req_builder = local_var_req_builder.query(&[("group_missing_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hidden_hits {
        local_var_req_builder = local_var_req_builder.query(&[("hidden_hits", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_affix_num_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_affix_num_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_end_tag {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_end_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_fields {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_full_fields {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_full_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_start_tag {
        local_var_req_builder = local_var_req_builder.query(&[("highlight_start_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_fields {
        local_var_req_builder = local_var_req_builder.query(&[("include_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = infix {
        local_var_req_builder = local_var_req_builder.query(&[("infix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_candidates {
        local_var_req_builder = local_var_req_builder.query(&[("max_candidates", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_extra_prefix {
        local_var_req_builder = local_var_req_builder.query(&[("max_extra_prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_extra_suffix {
        local_var_req_builder = local_var_req_builder.query(&[("max_extra_suffix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_facet_values {
        local_var_req_builder = local_var_req_builder.query(&[("max_facet_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_len_1typo {
        local_var_req_builder = local_var_req_builder.query(&[("min_len_1typo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_len_2typo {
        local_var_req_builder = local_var_req_builder.query(&[("min_len_2typo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = num_typos {
        local_var_req_builder = local_var_req_builder.query(&[("num_typos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = override_tags {
        local_var_req_builder = local_var_req_builder.query(&[("override_tags", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pinned_hits {
        local_var_req_builder = local_var_req_builder.query(&[("pinned_hits", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pre_segmented_query {
        local_var_req_builder = local_var_req_builder.query(&[("pre_segmented_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prefix {
        local_var_req_builder = local_var_req_builder.query(&[("prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = preset {
        local_var_req_builder = local_var_req_builder.query(&[("preset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prioritize_exact_match {
        local_var_req_builder = local_var_req_builder.query(&[("prioritize_exact_match", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prioritize_num_matching_fields {
        local_var_req_builder = local_var_req_builder.query(&[("prioritize_num_matching_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = prioritize_token_position {
        local_var_req_builder = local_var_req_builder.query(&[("prioritize_token_position", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query_by {
        local_var_req_builder = local_var_req_builder.query(&[("query_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query_by_weights {
        local_var_req_builder = local_var_req_builder.query(&[("query_by_weights", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_embedding_num_tries {
        local_var_req_builder = local_var_req_builder.query(&[("remote_embedding_num_tries", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_embedding_timeout_ms {
        local_var_req_builder = local_var_req_builder.query(&[("remote_embedding_timeout_ms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_cutoff_ms {
        local_var_req_builder = local_var_req_builder.query(&[("search_cutoff_ms", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = snippet_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("snippet_threshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sort_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = split_join_tokens {
        local_var_req_builder = local_var_req_builder.query(&[("split_join_tokens", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stopwords {
        local_var_req_builder = local_var_req_builder.query(&[("stopwords", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = synonym_num_typos {
        local_var_req_builder = local_var_req_builder.query(&[("synonym_num_typos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = synonym_prefix {
        local_var_req_builder = local_var_req_builder.query(&[("synonym_prefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = text_match_type {
        local_var_req_builder = local_var_req_builder.query(&[("text_match_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = typo_tokens_threshold {
        local_var_req_builder = local_var_req_builder.query(&[("typo_tokens_threshold", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = use_cache {
        local_var_req_builder = local_var_req_builder.query(&[("use_cache", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vector_query {
        local_var_req_builder = local_var_req_builder.query(&[("vector_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voice_query {
        local_var_req_builder = local_var_req_builder.query(&[("voice_query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SearchCollectionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update an individual document from a collection by using its ID. The update can be partial.
pub async fn update_document(configuration: &mut configuration::Configuration, collection_name: &str, document_id: &str, body: serde_json::Value, dirty_values: Option<models::DirtyValues>) -> Result<serde_json::Value, Error<UpdateDocumentError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents/{documentId}", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name), documentId=crate::apis::urlencode(document_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = dirty_values {
        local_var_req_builder = local_var_req_builder.query(&[("dirty_values", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateDocumentError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The filter_by query parameter is used to filter to specify a condition against which the documents are matched. The request body contains the fields that should be updated for any documents that match the filter condition. This endpoint is only available if the Typesense server is version `0.25.0.rc12` or later.
pub async fn update_documents(configuration: &mut configuration::Configuration, collection_name: &str, body: serde_json::Value, filter_by: Option<&str>) -> Result<models::UpdateDocuments200Response, Error<UpdateDocumentsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/documents", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter_by {
        local_var_req_builder = local_var_req_builder.query(&[("filter_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateDocumentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
pub async fn upsert_search_override(configuration: &mut configuration::Configuration, collection_name: &str, override_id: &str, search_override_schema: models::SearchOverrideSchema) -> Result<models::SearchOverride, Error<UpsertSearchOverrideError>> {
    let local_var_configuration = configuration;

    let local_var_client = &mut local_var_configuration.client;

    let local_var_uri_str = format!("{}/collections/{collectionName}/overrides/{overrideId}", local_var_configuration.base_path, collectionName=crate::apis::urlencode(collection_name), overrideId=crate::apis::urlencode(override_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-TYPESENSE-API-KEY", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&search_override_schema);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpsertSearchOverrideError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

