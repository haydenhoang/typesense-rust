/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{ContentType, Error, configuration};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

/// struct for passing parameters to the method [`delete_curation_set`]
#[derive(Clone, Debug)]
pub struct DeleteCurationSetParams {
    /// The name of the curation set to delete
    pub curation_set_name: String,
}

/// struct for passing parameters to the method [`delete_curation_set_item`]
#[derive(Clone, Debug)]
pub struct DeleteCurationSetItemParams {
    /// The name of the curation set
    pub curation_set_name: String,
    /// The id of the curation item to delete
    pub item_id: String,
}

/// struct for passing parameters to the method [`retrieve_curation_set`]
#[derive(Clone, Debug)]
pub struct RetrieveCurationSetParams {
    /// The name of the curation set to retrieve
    pub curation_set_name: String,
}

/// struct for passing parameters to the method [`retrieve_curation_set_item`]
#[derive(Clone, Debug)]
pub struct RetrieveCurationSetItemParams {
    /// The name of the curation set
    pub curation_set_name: String,
    /// The id of the curation item to retrieve
    pub item_id: String,
}

/// struct for passing parameters to the method [`retrieve_curation_set_items`]
#[derive(Clone, Debug)]
pub struct RetrieveCurationSetItemsParams {
    /// The name of the curation set to retrieve items for
    pub curation_set_name: String,
}

/// struct for passing parameters to the method [`upsert_curation_set`]
#[derive(Clone, Debug)]
pub struct UpsertCurationSetParams {
    /// The name of the curation set to create/update
    pub curation_set_name: String,
    /// The curation set to be created/updated
    pub curation_set_create_schema: models::CurationSetCreateSchema,
}

/// struct for passing parameters to the method [`upsert_curation_set_item`]
#[derive(Clone, Debug)]
pub struct UpsertCurationSetItemParams {
    /// The name of the curation set
    pub curation_set_name: String,
    /// The id of the curation item to upsert
    pub item_id: String,
    /// The curation item to be created/updated
    pub curation_item_create_schema: models::CurationItemCreateSchema,
}

/// struct for typed errors of method [`delete_curation_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCurationSetError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_curation_set_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCurationSetItemError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_curation_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveCurationSetError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_curation_set_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveCurationSetItemError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_curation_set_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveCurationSetItemsError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_curation_sets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveCurationSetsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_curation_set`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertCurationSetError {
    Status400(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_curation_set_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertCurationSetItemError {
    Status400(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// Delete a specific curation set by its name
pub async fn delete_curation_set(
    configuration: &configuration::Configuration,
    params: &DeleteCurationSetParams,
) -> Result<models::CurationSetDeleteSchema, Error<DeleteCurationSetError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::CurationSetDeleteSchema`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::CurationSetDeleteSchema`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCurationSetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a specific curation item by its id
pub async fn delete_curation_set_item(
    configuration: &configuration::Configuration,
    params: &DeleteCurationSetItemParams,
) -> Result<models::CurationItemDeleteSchema, Error<DeleteCurationSetItemError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}/items/{itemId}",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name),
        itemId = crate::apis::urlencode(&params.item_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::CurationItemDeleteSchema`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::CurationItemDeleteSchema`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteCurationSetItemError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a specific curation set by its name
pub async fn retrieve_curation_set(
    configuration: &configuration::Configuration,
    params: &RetrieveCurationSetParams,
) -> Result<models::CurationSetCreateSchema, Error<RetrieveCurationSetError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::CurationSetCreateSchema`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::CurationSetCreateSchema`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveCurationSetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve a specific curation item by its id
pub async fn retrieve_curation_set_item(
    configuration: &configuration::Configuration,
    params: &RetrieveCurationSetItemParams,
) -> Result<models::CurationItemSchema, Error<RetrieveCurationSetItemError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}/items/{itemId}",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name),
        itemId = crate::apis::urlencode(&params.item_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::CurationItemSchema`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::CurationItemSchema`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveCurationSetItemError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve all curation items in a set
pub async fn retrieve_curation_set_items(
    configuration: &configuration::Configuration,
    params: &RetrieveCurationSetItemsParams,
) -> Result<Vec<models::CurationItemSchema>, Error<RetrieveCurationSetItemsError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}/items",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `Vec<models::CurationItemSchema>`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `Vec<models::CurationItemSchema>`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveCurationSetItemsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve all curation sets
pub async fn retrieve_curation_sets(
    configuration: &configuration::Configuration,
) -> Result<Vec<models::CurationSetSchema>, Error<RetrieveCurationSetsError>> {
    let uri_str = format!("{}/curation_sets", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `Vec<models::CurationSetSchema>`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `Vec<models::CurationSetSchema>`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<RetrieveCurationSetsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create or update a curation set with the given name
pub async fn upsert_curation_set(
    configuration: &configuration::Configuration,
    params: &UpsertCurationSetParams,
) -> Result<models::CurationSetSchema, Error<UpsertCurationSetError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.curation_set_create_schema);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::CurationSetSchema`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::CurationSetSchema`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpsertCurationSetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create or update a curation set item with the given id
pub async fn upsert_curation_set_item(
    configuration: &configuration::Configuration,
    params: &UpsertCurationSetItemParams,
) -> Result<models::CurationItemSchema, Error<UpsertCurationSetItemError>> {
    let uri_str = format!(
        "{}/curation_sets/{curationSetName}/items/{itemId}",
        configuration.base_path,
        curationSetName = crate::apis::urlencode(&params.curation_set_name),
        itemId = crate::apis::urlencode(&params.item_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = &apikey.key;
        let value = match apikey.prefix {
            Some(ref prefix) => &format!("{prefix} {key}"),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.curation_item_create_schema);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => {
                return Err(Error::from(serde_json::Error::custom(
                    "Received `text/plain` content type response that cannot be converted to `models::CurationItemSchema`",
                )));
            }
            ContentType::Unsupported(unknown_type) => {
                return Err(Error::from(serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `models::CurationItemSchema`"
                ))));
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpsertCurationSetItemError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
