/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
#[builder(on(String, into))]
pub struct GetCollectionsParameters {
    /// Comma-separated list of fields from the collection to exclude from the response
    #[serde(rename = "exclude_fields", skip_serializing_if = "Option::is_none")]
    pub exclude_fields: Option<String>,
    /// Number of collections to fetch. Default: returns all collections. 
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    /// Identifies the starting point to return collections when paginating.
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
}

impl GetCollectionsParameters {
    pub fn new() -> GetCollectionsParameters{
        GetCollectionsParameters {
            exclude_fields: None,
            limit: None,
            offset: None,
        }
    }
}

