/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalyticsRuleCreateParams {
    #[serde(
        rename = "destination_collection",
        skip_serializing_if = "Option::is_none"
    )]
    pub destination_collection: Option<String>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(
        rename = "capture_search_requests",
        skip_serializing_if = "Option::is_none"
    )]
    pub capture_search_requests: Option<bool>,
    #[serde(rename = "meta_fields", skip_serializing_if = "Option::is_none")]
    pub meta_fields: Option<Vec<String>>,
    #[serde(rename = "expand_query", skip_serializing_if = "Option::is_none")]
    pub expand_query: Option<bool>,
    #[serde(rename = "counter_field", skip_serializing_if = "Option::is_none")]
    pub counter_field: Option<String>,
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

impl AnalyticsRuleCreateParams {
    pub fn new() -> AnalyticsRuleCreateParams {
        AnalyticsRuleCreateParams {
            destination_collection: None,
            limit: None,
            capture_search_requests: None,
            meta_fields: None,
            expand_query: None,
            counter_field: None,
            weight: None,
        }
    }
}
