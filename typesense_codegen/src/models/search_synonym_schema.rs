/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 28.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchSynonymSchema {
    /// Locale for the synonym, leave blank to use the standard tokenizer.
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.
    #[serde(rename = "root", skip_serializing_if = "Option::is_none")]
    pub root: Option<String>,
    /// By default, special characters are dropped from synonyms. Use this attribute to specify which special characters should be indexed as is.
    #[serde(rename = "symbols_to_index", skip_serializing_if = "Option::is_none")]
    pub symbols_to_index: Option<Vec<String>>,
    /// Array of words that should be considered as synonyms.
    #[serde(rename = "synonyms")]
    pub synonyms: Vec<String>,
}

impl SearchSynonymSchema {
    pub fn new(synonyms: Vec<String>) -> SearchSynonymSchema {
        SearchSynonymSchema {
            locale: None,
            root: None,
            symbols_to_index: None,
            synonyms,
        }
    }
}

