/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 * The version of the OpenAPI document: 30.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalyticsRuleCreate {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "collection")]
    pub collection: String,
    #[serde(rename = "event_type")]
    pub event_type: String,
    #[serde(rename = "rule_tag", skip_serializing_if = "Option::is_none")]
    pub rule_tag: Option<String>,
    #[serde(rename = "params", skip_serializing_if = "Option::is_none")]
    pub params: Option<Box<models::AnalyticsRuleCreateParams>>,
}

impl AnalyticsRuleCreate {
    pub fn new(
        name: String,
        r#type: Type,
        collection: String,
        event_type: String,
    ) -> AnalyticsRuleCreate {
        AnalyticsRuleCreate {
            name,
            r#type,
            collection,
            event_type,
            rule_tag: None,
            params: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "popular_queries")]
    PopularQueries,
    #[serde(rename = "nohits_queries")]
    NohitsQueries,
    #[serde(rename = "counter")]
    Counter,
    #[serde(rename = "log")]
    Log,
}

impl Default for Type {
    fn default() -> Type {
        Self::PopularQueries
    }
}
