/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResult<D> {
    #[serde(rename = "facet_counts", skip_serializing_if = "Option::is_none")]
    pub facet_counts: Option<Vec<models::FacetCounts>>,
    /// The number of documents found
    #[serde(rename = "found", skip_serializing_if = "Option::is_none")]
    pub found: Option<i32>,
    #[serde(rename = "found_docs", skip_serializing_if = "Option::is_none")]
    pub found_docs: Option<i32>,
    /// The number of milliseconds the search took
    #[serde(rename = "search_time_ms", skip_serializing_if = "Option::is_none")]
    pub search_time_ms: Option<i32>,
    /// The total number of documents in the collection
    #[serde(rename = "out_of", skip_serializing_if = "Option::is_none")]
    pub out_of: Option<i32>,
    /// Whether the search was cut off
    #[serde(rename = "search_cutoff", skip_serializing_if = "Option::is_none")]
    pub search_cutoff: Option<bool>,
    /// The search result page number
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    #[serde(rename = "grouped_hits", skip_serializing_if = "Option::is_none")]
    pub grouped_hits: Option<Vec<models::SearchGroupedHit<D>>>,
    /// The documents that matched the search query
    #[serde(rename = "hits", skip_serializing_if = "Option::is_none")]
    pub hits: Option<Vec<models::SearchResultHit<D>>>,
    #[serde(rename = "request_params", skip_serializing_if = "Option::is_none")]
    pub request_params: Option<Box<models::SearchRequestParams>>,
    #[serde(rename = "conversation", skip_serializing_if = "Option::is_none")]
    pub conversation: Option<Box<models::SearchResultConversation>>,
    /// Returned only for union query response.
    #[serde(
        rename = "union_request_params",
        skip_serializing_if = "Option::is_none"
    )]
    pub union_request_params: Option<Vec<models::SearchRequestParams>>,
    /// Custom JSON object that can be returned in the search response
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl<D> SearchResult<D> {
    pub fn new() -> SearchResult<D> {
        SearchResult {
            facet_counts: None,
            found: None,
            found_docs: None,
            search_time_ms: None,
            out_of: None,
            search_cutoff: None,
            page: None,
            grouped_hits: None,
            hits: None,
            request_params: None,
            conversation: None,
            union_request_params: None,
            metadata: None,
        }
    }
}
