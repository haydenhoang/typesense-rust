/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalyticsEventsResponseEventsInner {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "event_type", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    #[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
    pub collection: Option<String>,
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "doc_id", skip_serializing_if = "Option::is_none")]
    pub doc_id: Option<String>,
    #[serde(rename = "doc_ids", skip_serializing_if = "Option::is_none")]
    pub doc_ids: Option<Vec<String>>,
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
}

impl AnalyticsEventsResponseEventsInner {
    pub fn new() -> AnalyticsEventsResponseEventsInner{
        AnalyticsEventsResponseEventsInner {
            name: None,
            event_type: None,
            collection: None,
            timestamp: None,
            user_id: None,
            doc_id: None,
            doc_ids: None,
            query: None,
        }
    }
}

