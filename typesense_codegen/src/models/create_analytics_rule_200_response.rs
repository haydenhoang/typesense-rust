/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 * The version of the OpenAPI document: 30.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAnalyticsRule200Response {
    AnalyticsRule(Box<models::AnalyticsRule>),
    Array(Vec<models::CreateAnalyticsRule200ResponseOneOfInner>),
}

impl Default for CreateAnalyticsRule200Response {
    fn default() -> Self {
        Self::AnalyticsRule(Default::default())
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "popular_queries")]
    PopularQueries,
    #[serde(rename = "nohits_queries")]
    NohitsQueries,
    #[serde(rename = "counter")]
    Counter,
    #[serde(rename = "log")]
    Log,
}

impl Default for Type {
    fn default() -> Type {
        Self::PopularQueries
    }
}
