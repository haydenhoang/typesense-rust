/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AnalyticsEventData : Event payload
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct AnalyticsEventData {
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "doc_id", skip_serializing_if = "Option::is_none")]
    pub doc_id: Option<String>,
    #[serde(rename = "doc_ids", skip_serializing_if = "Option::is_none")]
    pub doc_ids: Option<Vec<String>>,
    #[serde(rename = "q", skip_serializing_if = "Option::is_none")]
    pub q: Option<String>,
    #[serde(rename = "analytics_tag", skip_serializing_if = "Option::is_none")]
    pub analytics_tag: Option<String>,
}

impl AnalyticsEventData {
    /// Event payload
    pub fn new() -> AnalyticsEventData{
        AnalyticsEventData {
            user_id: None,
            doc_id: None,
            doc_ids: None,
            q: None,
            analytics_tag: None,
        }
    }
}

