/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 30.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, bon::Builder)]
pub struct CollectionUpdateSchema {
    /// A list of fields for querying, filtering and faceting
    #[serde(rename = "fields")]
    pub fields: Vec<models::Field>,
    /// List of synonym set names to associate with this collection
    #[serde(rename = "synonym_sets", skip_serializing_if = "Option::is_none")]
    pub synonym_sets: Option<Vec<String>>,
    /// Optional details about the collection, e.g., when it was created, who created it etc. 
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<serde_json::Value>,
}

impl CollectionUpdateSchema {
    pub fn new(fields: Vec<models::Field>) -> CollectionUpdateSchema{
        CollectionUpdateSchema {
            fields,
            synonym_sets: None,
            metadata: None,
        }
    }
}

